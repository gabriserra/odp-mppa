O ?= ./output

project-name := odp

TOPDIR := $(dir $(realpath $(lastword $(MAKEFILE_LIST))))
ODP_ARCH ?= k1b-kalray-mos_konic80
APST_DIR ?= $(shell pwd)/install
ODP_TOOLCHAIN_DIR ?= $(K1_TOOLCHAIN_DIR)
TEST_MULTIBIN_NAME ?= $(TEST_NAME)

include $(ODP_TOOLCHAIN_DIR)/share/odp/build/mk/platforms.inc

# Kalray internal system name
SYSTEM_NAME = $(subst -kalray,,$(ODP_ARCH))
CORE_ARCH = $(firstword $(subst -, ,$(ODP_ARCH)))
OS_PLAT_NAME  = $(firstword $(subst _, ,$(ODP_ARCH)))
OS_BOARD_NAME = $(lastword $(subst _, ,$(ODP_ARCH)))

# extract OS name and board name
REAL_OS_NAME = $(lastword $(subst -, ,$(OS_PLAT_NAME)))
OS_NAME = $(OS_$(REAL_OS_NAME))
BOARD_NAME = $(BOARD_$(lastword $(subst _, ,$(OS_BOARD_NAME))))
ODP_FLAVOUR = $(BOARD_$(lastword $(subst _, ,$(OS_BOARD_NAME)))_VER)

REAL_ODP_ARCH = $(OS_PLAT_NAME)_$(ODP_FLAVOUR)
INCLUDE_DIR=$($(REAL_ODP_ARCH)_INC_DIR)

cluster-system := $(OS_NAME)
arch = $(CORE_ARCH)
board = $(BOARD_NAME)

cflags := -Wall -Werror -Wextra . -std=gnu11
LIB_NOC_LFLAGS :=  -lmppapower -lmpparouting -lmppanoc

ifeq ($(MAKELEVEL),0)
$(info --- Building for arch $(arch), os $(OS_NAME), board $(BOARD_NAME) ---)
endif

FIRMWARE_DIR = $(ODP_TOOLCHAIN_DIR)/share/odp/firmware/

cluster-cflags := -I$(ODP_TOOLCHAIN_DIR)/$(INCLUDE_DIR)/include $($(REAL_ODP_ARCH)_CFLAGS)
cluster-lflags := -L$(ODP_TOOLCHAIN_DIR)/lib/odp/$(ODP_FLAVOUR)/$(OS_PLAT_NAME)/
cluster-lflags += -lodphelper -lodp -lcrypto  $(LIB_NOC_LFLAGS) $($(REAL_ODP_ARCH)_LDFLAGS) -Wl,--gc-sections

# Empty direct assignement to allows += to work in included Makefiles
io-bin :=
mppa-bin :=
cluster-bin :=
cluster-tests :=
mppa-tests :=
sim-runner-opts := --mboard=developer

# Setting ODP_MAKEFILE_NO_RULES=1 Disable the default rule so the user can override them
ifndef ODP_MAKEFILE_NO_RULES
build: all

install: all
		 @if [ "$(APST_DIR)" == "" ]; then echo "ERROR: APST_DIR" not set; exit 1; fi
		 mkdir -p $(APST_DIR)/$(TEST_NAME)
		 install $(addprefix output/bin/,$($(TEST_NAME)-multibinary)) $(addprefix $(APP_DIR)/,$($(TEST_NAME)-scripts)) $($(TEST_NAME)-extras) $(APST_DIR)/$(TEST_NAME)
endif

# If ODP_MAKEFILE_STD_FIRMWARE = 1, user has prebuild his firmware
# and need to add it to io-bin and $(TEST_NAME)-objs manually
# If not, add rules to build the available firmware
ifndef ODP_MAKEFILE_STD_FIRMWARE
ifndef ODP_MAKEFILE_NO_FIRMWARE

pre-build-hooks := build-firmware
clean-hooks := clean-firmware

$(realpath .)/firmware-$(OS_BOARD_NAME)/firmware.kelf-nameinmpk := firmware.kelf
io-bin += $(realpath .)/firmware-$(OS_BOARD_NAME)/firmware.kelf
$(TEST_MULTIBIN_NAME)-objs := $(realpath .)/firmware-$(OS_BOARD_NAME)/firmware.kelf

build-firmware:
	+mkdir -p ./firmware-$(OS_BOARD_NAME) && cd ./firmware-$(OS_BOARD_NAME) && \
	$(MAKE) -f $(APP_DIR)/firmware/Makefile ODP_FIRMWARE_CONFIG="k1b-kalray_$(OS_BOARD_NAME)" \
	ODP_TOOLCHAIN_DIR="$(ODP_TOOLCHAIN_DIR)" all

clean-firmware:
	if [ -d ./firmware-$(OS_BOARD_NAME) ]; then cd ./firmware-$(OS_BOARD_NAME) && \
	$(MAKE) -f $(APP_DIR)/firmware/Makefile ODP_FIRMWARE_CONFIG="k1b-kalray_$(OS_BOARD_NAME)" \
	ODP_TOOLCHAIN_DIR="$(ODP_TOOLCHAIN_DIR)" clean; else true; fi
endif
endif
